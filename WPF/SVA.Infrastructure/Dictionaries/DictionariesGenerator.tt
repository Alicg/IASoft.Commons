<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Configuration.dll" #>
<#@ Assembly Name="System.Security.dll" #>
<#@ Assembly Name="System.Configuration.dll" #>
<#@ Assembly Name="C:\Program Files (x86)\System.Data.SQLite\2015\bin\System.Data.SQLite.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.SQLite" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string namespaceName = code.VsNamespaceSuggestion();
var entries = GetDictionaryEntries().GroupBy(v => v.Dictionary).ToArray();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);
foreach (var entry in entries)
{	
    fileManager.StartNewFile("I" + entry.Key + ".cs");
#>
namespace SVA.Infrastructure.Dictionaries
{
	public interface I<#=entry.Key#> : IViewModelDictionary
	{
<#
foreach(var prop in entry.ToArray())
{
	if(prop.Key == "DictionaryName")
		continue;
	#>
        [Translatable]
		string <#= prop.Key #>
		{
            get; set;
		}
<# 
}
	#>
	}	
}
<#
}
fileManager.Process();
#>
<#+
class DictionaryEntry
{
public string Dictionary { get; set; }
public string Key { get; set; }
}
 
 
IList<DictionaryEntry> GetDictionaryEntries()
{ 
var conn = new SQLiteConnection(@"Data Source=W:\Home\sport\SportVideoAnalyzer\src\SVA.Common\SVA.Data.SQLite\handball.db;");
conn.Open();
var cmd = conn.CreateCommand();
cmd.CommandText = "SELECT Distinct Dictionary, Key FROM ctgTranslates";
var reader = cmd.ExecuteReader();
var res = new List<DictionaryEntry>();
while (reader.Read())
{
var record = (IDataRecord)reader;
res.Add(new DictionaryEntry 
	{
		Dictionary = record[0].ToString(),
		Key = record[1].ToString()
	});
}
 
return res;
}
#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}
#>